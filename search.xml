<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019-12-28</title>
    <url>/2019/12/28/2019-12-28/</url>
    <content><![CDATA[<html><head></head><body><p>刚考研结束，其他三门还行，数学感觉要炸了。</p>
<p>毕设也懒得做，把以前的网站重新搭建起来，现在差不多就这样吧。</p>
<p>考研结束真觉得是个废人了。</p>
<p>最后坐等Switch到。</p>
</body></html>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>2019-12-29</title>
    <url>/2019/12/29/2019-12-29/</url>
    <content><![CDATA[<html><head></head><body><p>今天又赖床到10点了，emmm。</p>
<p>起来看一会视频，吃个饭去拿风扇和我等了七天的switch，开心😊。</p>
<p>风扇这东西，好像是我这台电脑的通病，总是在闭合情况下打开电脑时，风扇总会发出间断性的噪声，本来以为我是以为是风扇能够检测外侧震动，从而保护自己的一种措施，没想这玩意失控，噪声相当难忍受。</p>
<p>拆机图:<br><img src="/2019/12/29/2019-12-29/mi-pro.jpg" alt></p>
<p>风扇：<br><img src="/2019/12/29/2019-12-29/fan.jpg" alt></p>
<p>switch到了，等待更新中：<br><img src="/2019/12/29/2019-12-29/switch.jpg" alt></p>
<p>这是我是PDD，2279(港版主机加塞尔达)，真的太香了。可惜只有单独主机，转接头、闪存、保护包还要另外买。</p>
<p>其他东西还在路上，不知道还要不要买个pro手柄。</p>
<p>今天就先这样了吧。</p>
</body></html>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-14</title>
    <url>/2020/01/14/2020-01-14/</url>
    <content><![CDATA[<html><head></head><body><p>忙了一星期，准备在年前完成实习生工作的寻找，现在已经入职两天了。这还是很紧要的，毕竟我们学校有4个实习的必修学分，实习期必须满3个月。</p>
<p>找工作唯一的感觉，就是感觉学的不够深入，虽然接触了大部分东西，但大部分都是浅尝辄止。都说今年是互联网企业的寒冬，但是这样也得硬着头皮上了。如果实在找不到的话，就在老师的手下做实习生吧。</p>
<p>忘了说我的进的是虹软科技，测试开发实习生，可惜没有开发岗位了。</p>
<p>已经实习两天了，感觉还不错，公司氛围挺好的，其他的以后再说说吧。</p>
</body></html>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-24</title>
    <url>/2020/01/24/2020-01-24/</url>
    <content><![CDATA[<html><head></head><body><p>大家新年快乐。</p>
<p>19号坐的的动车回来，还好没赶上疫情爆发的时候。</p>
<p>这几天舆论发酵的厉害，其实也没必要过度惊慌，武汉1000多万人，就算实际感染的人数有几千人，其实中奖几率也就是万分之一。但是也不能过度放松。必要的带带口罩，勤洗手其实就够了。</p>
<p>希望一切都会好起来。</p>
</body></html>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>新年</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-26</title>
    <url>/2020/02/26/2020-02-26/</url>
    <content><![CDATA[<html><head></head><body><p>不好意思，差不多一个多月没有更新了。</p>
<p>因为疫情，没法回杭州了。当然我这边已经开始远程办公了，从2月初就开始了，开始了差不都三星期了。</p>
<p>基本上每天早上9点起来，吃个早餐，开始工作。晚上打麻将，然后switch 1-2小时。毕设根本不想动……</p>
<p>考研成绩也已经出了，考的比较一般吧，还是有机会进复试的，现在好好准备复试吧。之后等复试结束，录取名单出了，再总结一下考研历程吧。</p>
<p>写这篇随笔的目的，主要是准备转换生活方式了。</p>
<p>今年上半年的的三座大山：</p>
<ul>
<li>研究生复试</li>
<li>毕设</li>
<li>实习</li>
</ul>
<p>希望这三个都能好好的完成。</p>
<p>就到这里吧。</p>
</body></html>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>2020-03-29</title>
    <url>/2020/03/29/2020-03-29/</url>
    <content><![CDATA[<html><head></head><body><p>不好意思好久没更新了。</p>
<p>我三月七号回的杭州，在自如上，在公司旁边租了小房子，自我隔离了七天。</p>
<p>还算是比较贵，6.4平、公共厨房、公共卫生间，一天60。不过也没办法短租不太好找，一个月工资全拿来交房租了(难受</p>
<p>三月十六号开始真正回公司上班。</p>
<p>工作的同时还伴随着完成毕设.. 每天都很焦躁. (疯狂拖延症），拖着拖着一天就结束了，啥事都没做成（难受。</p>
<p>复试大概是要拖到五月了，应该还有时间吧。</p>
<p>今天就到这里吧，尽量每个月都更新一点。</p>
</body></html>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/2020/01/10/command-pattern/</url>
    <content><![CDATA[<html><head></head><body><h2 id="设计模式之一：命令模式"><a href="#设计模式之一：命令模式" class="headerlink" title="设计模式之一：命令模式"></a>设计模式之一：命令模式</h2><p><strong>定义</strong>：将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数话其他对象。命令模式也支持可撤销的操作。</p>
<p><strong>主要解决</strong>：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p>
<p><strong>何时使用</strong>：在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</p>
<p><strong>如何解决</strong>：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</p>
<a id="more"></a>
<p><strong>关键代码</strong>：定义三个角色：</p>
<ol>
<li>received 真正的命令执行对象 </li>
<li>Command </li>
<li>invoker 使用命令对象的入口</li>
</ol>
<p><strong>应用实例</strong>：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</p>
<p><strong>优点</strong>： </p>
<ol>
<li>降低了系统耦合度。 </li>
<li>新的命令可以很容易添加到系统中去。</li>
</ol>
<p><strong>缺点</strong>：使用命令模式可能会导致某些系统有过多的具体命令类。</p>
<p><strong>使用场景</strong>：认为是命令的地方都可以使用命令模式，比如： </p>
<ol>
<li>GUI 中每一个按钮都是一条命令。 </li>
<li>模拟 CMD。</li>
</ol>
<p><strong>注意事项</strong>：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2020/01/10/command-pattern/command-pattern-class.png" alt></p>
</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>Java</tag>
        <tag>命令模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰者模式</title>
    <url>/2020/01/05/decorate-pattern/</url>
    <content><![CDATA[<html><head></head><body><h2 id="设计模式之一：装饰者模式"><a href="#设计模式之一：装饰者模式" class="headerlink" title="设计模式之一：装饰者模式"></a>设计模式之一：装饰者模式</h2><p><strong>定义</strong>：动态地将责任附加到对象上。若要拓展功能，装饰者提供了比继承更有弹性的替代方案。</p>
<p><strong>主要解决</strong>：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p>
<p><strong>何时使用</strong>：在不想增加很多子类的情况下扩展类。</p>
<p><strong>如何解决</strong>：将具体功能职责划分，同时继承装饰者模式。</p>
<a id="more"></a>
<p><strong>关键代码</strong>： </p>
<ol>
<li>Component 类充当抽象角色，不应该具体实现。 </li>
<li>修饰类引用和继承 Component 类，具体扩展类重写父类方法。</li>
</ol>
<p><strong>应用实例</strong>： </p>
<ol>
<li>孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 </li>
<li>不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</li>
</ol>
<p><strong>优点</strong>：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p>
<p><strong>缺点</strong>：多层装饰比较复杂。</p>
<p><strong>使用场景</strong>： </p>
<ol>
<li>扩展一个类的功能。 </li>
<li>动态增加功能，动态撤销。</li>
</ol>
<p><strong>注意事项</strong>：可代替继承。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="/2020/01/05/decorate-pattern/class.png" alt></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>抽象类:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Beverage.class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>{</span><br><span class="line">    String description = <span class="string">"Unknown bean.Beverage"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// CondimentDecorator.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>具体组件：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// DarkRoast.class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.5</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DarkRoast</span><span class="params">()</span> </span>{</span><br><span class="line">        description = <span class="string">"darkRoast"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Decaf.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decaf</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> .<span class="number">67</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decaf</span><span class="params">()</span> </span>{</span><br><span class="line">        description = <span class="string">"bean.Decaf"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Espresso.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>{</span><br><span class="line">        description = <span class="string">"Espresso"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// HouseBlend.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> .<span class="number">89</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span> </span>{</span><br><span class="line">        description = <span class="string">"House Blend Coffee"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Milk.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>{</span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Beverage beverage)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">", Milk"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> + beverage.cost();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mocha.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span>  <span class="title">CondimentDecorator</span> </span>{</span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">", Mocha"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> .<span class="number">20</span> + beverage.cost();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Soy.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>{</span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Beverage beverage)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">", Soy"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.7</span> + beverage.cost();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whip.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whip</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>{</span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Whip</span><span class="params">(Beverage beverage)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">", Whip"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.8</span> + beverage.cost();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// StarbuzzCoffee.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarbuzzCoffee</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">        System.out.println(beverage.getDescription() + <span class="string">" $"</span> + beverage.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage1 = <span class="keyword">new</span> DarkRoast();</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Whip(beverage1);</span><br><span class="line">        System.out.println(beverage1.getDescription() + <span class="string">" $"</span> + beverage1.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage2 = <span class="keyword">new</span> HouseBlend();</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Soy(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Whip(beverage2);</span><br><span class="line">        System.out.println(beverage2.getDescription() + <span class="string">" $"</span> + beverage2.cost());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
  </entry>
  <entry>
    <title>设计原则</title>
    <url>/2020/01/05/design-principles/</url>
    <content><![CDATA[<html><head></head><body><h2 id="设计模式：设计原则"><a href="#设计模式：设计原则" class="headerlink" title="设计模式：设计原则"></a>设计模式：设计原则</h2><ol>
<li><p>找出应用中可能需要变化指出，把它们独立出来，不要和那些不需要变化的代码混在一起。</p>
</li>
<li><p>针对接口编程，而不是针对实现编程。</p>
</li>
<li><p>多用组合，少用继承。</p>
<blockquote>
<p>针对接口编程，即针对超类型编程，也就是使用多态。</p>
</blockquote>
</li>
<li><p>为了交互对象之间的松耦合设计而努力。</p>
</li>
<li><p>开放-关闭原则：类应该对拓展开放，对修改关闭。</p>
</li>
<li><p>依赖倒置原则：要依赖抽象，不要依赖具体类。</p>
<blockquote>
<p>变量不可以持有具体类的引用。<br>不要让类派生自具体类。<br>不要覆盖基类中已实现的方法。</p>
</blockquote>
</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/2020/01/06/factory-pattern/</url>
    <content><![CDATA[<html><head></head><body><h2 id="设计模式之一：工厂模式"><a href="#设计模式之一：工厂模式" class="headerlink" title="设计模式之一：工厂模式"></a>设计模式之一：工厂模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>不是一个真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体类解耦。</p>
<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p><strong>定义</strong>：定义了一个创建对象的接口，但由子类决定要实例化的类事哪一个。工厂方法让类把实例化推迟到子类。</p>
<p><strong>主要解决</strong>：主要解决接口选择的问题。</p>
<p><strong>何时使用</strong>：我们明确地计划不同条件下创建不同实例时。</p>
<p><strong>如何解决</strong>：让其子类实现工厂接口，返回的也是一个抽象的产品。</p>
<p><strong>关键代码</strong>：创建过程在其子类执行。</p>
<a id="more"></a>
<p><strong>应用实例</strong>： </p>
<ol>
<li>您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 </li>
<li>Hibernate 换数据库只需换方言和驱动就可以。</li>
</ol>
<p><strong>优点</strong>： </p>
<ol>
<li>一个调用者想创建一个对象，只要知道其名称就可以了。 </li>
<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 </li>
<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>
</ol>
<p><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
<p><strong>使用场景</strong>： </p>
<ol>
<li>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 </li>
<li>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 </li>
<li>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</li>
</ol>
<p><strong>注意事项</strong>：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="/2020/01/06/factory-pattern/class.png" alt></p>
<h3 id="设计模式之一：抽象工厂模式"><a href="#设计模式之一：抽象工厂模式" class="headerlink" title="设计模式之一：抽象工厂模式"></a>设计模式之一：抽象工厂模式</h3><p><strong>定义</strong>：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p>
<p><strong>主要解决</strong>：主要解决接口选择的问题。</p>
<p><strong>何时使用</strong>：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p>
<p><strong>如何解决</strong>：在一个产品族里面，定义多个产品。</p>
<p><strong>关键代码</strong>：在一个工厂里聚合多个同类产品。</p>
<p><strong>应用实例</strong>：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OOP 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。</p>
<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>
<p><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p>
<p><strong>使用场景</strong>： </p>
<ol>
<li>QQ 换皮肤，一整套一起换。 </li>
<li>生成不同操作系统的程序。</li>
</ol>
<p><strong>注意事项</strong>：产品族难扩展，产品等级易扩展。</p>
<h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/2020/01/06/factory-pattern/abstract-factory.png" alt></p>
</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>工厂方法模式</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年考研感想&amp;一些其他的</title>
    <url>/2020/05/24/graduation/</url>
    <content><![CDATA[<html><head></head><body><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>好久没更新了，前阵子忙着考研复试，学校开放之后，便从公司请假，回到学校封闭式管理了。</p>
<p>复试在5月16日，录取名单5月17日就出了，不得不说我浙这个效率真的高。</p>
<p>本人一战，双非一本本专业，报考的是<code>浙江大学软件学院</code>，运气较好，因为疫情扩招，最终录取到软件工程全日制。分数360+，按未扩招时算的在复试边缘。</p>
<p>这几天忙着毕设和找导师，更新的较迟，这是一个阶段性总结，等之后生活平稳了才会稳定更新。</p>
<a id="more"></a>
<h2 id="学校简介"><a href="#学校简介" class="headerlink" title="学校简介"></a>学校简介</h2><p>浙大计算机还是很强的，全国第三。浙大计算机主要在：CAD/CG、区块链、机器学习方面较为突出。报考浙大的计算机/电子信息主要有三个分院：计算机学院(计算机科学与技术(<code>学硕</code>)、软件工程（<code>学硕</code>）、网络空间安全(<code>学硕</code>)、计算机技术(<code>专硕</code>))、软件学院(软件工程(<code>专硕</code>))、工程师学院(物联网(<code>专硕</code>))</p>
<p>这三个学院考研科目公共课相同，专业课上：计院、工院都是408、软院878(c+数据结构)</p>
<p>计院录取人数：<a href="http://www.cs.zju.edu.cn/csen/2020/0430/c27006a2092231/page.htm" target="_blank" rel="noopener">http://www.cs.zju.edu.cn/csen/2020/0430/c27006a2092231/page.htm</a></p>
<p>软院录取人数：<a href="http://www.cst.zju.edu.cn/2020/0502/c32178a2092359/page.htm" target="_blank" rel="noopener">http://www.cst.zju.edu.cn/2020/0502/c32178a2092359/page.htm</a></p>
<p>工院录取人数：<a href="http://pi.zju.edu.cn/index.php?c=Index&a=news_detail&id=3308" target="_blank" rel="noopener">http://pi.zju.edu.cn/index.php?c=Index&a=news_detail&id=3308</a></p>
<p>浙大招得人算是非常多了，相对来说难度比招人数个位数的学校好多了，但是同样会吸引大量大佬来竞争。所以难度不太好评估。</p>
<p>浙大的复试较为公平，也是相对来说没那么繁杂的。</p>
<p>总分成绩 = (初试/5) x 0.7 + 复试 x 0.3</p>
<p>相当于：1分复试=2.1分初试，所以初试不高逆袭也不是不可能</p>
<p>其他的考研信息最好请关注分院官网，以及研究生招生网。</p>
<h2 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h2><p>我是从7月正式开始复习的，之前断断续续背了一些英语单词就不算进去了。</p>
<p>7月我觉考浙大可能有点迟了，因为我的高数基础和英语底子可能不算太好，所以在早期我数学一天6个小时，英语一天4个小时，因为我考的是软件学院，专业课最后三个月准备就可以了。所以最好在考研前评估自己的基础怎么样。</p>
<p>复习方法我就不说了，毕竟考得不高..</p>
<p>最难受的就是最用心复习的数学和英语并没有考起来，反而没怎复习的政治考得还不错。(难受)</p>
<p>我主要侧重于对于时间的把握。</p>
<p>今年因为疫情的关系，取消了上机考试。按照往年，上机也是复试的内容之一，当然pat可以代替上机复试。</p>
<p>换算公式：2分pat = 1分初试</p>
<p>可以看到pat还是相当重要的，同时pat和上机成绩只能2选1，就意味着如果你参加了上机考试，pat成绩作废，成绩只能算上机的，同时pat就只有当年的pat成绩有效。比如我考2020的研究生，只有2019年3月、9月、12月的有效。</p>
<p>这边推荐PAT考试尽量早开始，在3月份拿到高分最后，后面每天可以多出2、3时来复习。</p>
<p>我七月开始，pat也没考，后面花了比较多的时间复习pat，这部分其实可以提早结束。</p>
<p>我也写了一个<a href="https://charstal.com/DS/strategy-pat/" target="_blank" rel="noopener">pat攻略</a>，有兴趣的可以看看</p>
<p>其他就没什么好说的了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>考研选择比努力重要，今年软院ai上线就可以录取，相比隔壁的软件工程均分都到了390.</p>
<p>考985、211或者强势专业请早点开始。</p>
<p>尽早地评估自己地水平，对症下药。</p>
<p>我地一个同学因为数学低了2分，补了25分，最终无缘软院。补足短板十分重要。</p>
<p>最近忙着各种各样的荣誉，有点烦。感觉拿到浙大的录取通知书反而没有特别开心，身上的压力更大了。真是令人头秃。</p>
<p>过段时间离校，又得找个地方租，跟着导师做项目去了。</p>
<p>祝愿大家以后前程似锦。</p>
</body></html>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2020/01/04/observer-pattern/</url>
    <content><![CDATA[<html><head></head><body><h2 id="设计模式之一：观察者模式"><a href="#设计模式之一：观察者模式" class="headerlink" title="设计模式之一：观察者模式"></a>设计模式之一：观察者模式</h2><p><strong>定义</strong>：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>
<p><strong>主要解决</strong>：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p>
<p><strong>何时使用</strong>：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p>
<p><strong>如何解决</strong>：使用面向对象技术，可以将这种依赖关系弱化。</p>
<p><strong>关键代码</strong>：在抽象类里有一个 ArrayList 存放观察者们。</p>
<a id="more"></a>
<p><strong>应用实例</strong>： </p>
<ol>
<li>拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。</li>
<li>西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</li>
</ol>
<p><strong>优点</strong>： </p>
<ol>
<li>观察者和被观察者是抽象耦合的。 </li>
<li>建立一套触发机制。</li>
</ol>
<p><strong>缺点</strong>： </p>
<ol>
<li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 </li>
<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 </li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>
</ol>
<p><strong>使用场景</strong>：</p>
<p>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>一个对象必须通知其他对象，而并不知道这些对象是谁。<br>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</p>
<p><strong>注意事项</strong>： </p>
<ol>
<li>JAVA 中已经有了对观察者模式的支持类。 </li>
<li>避免循环引用。 </li>
<li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li>
</ol>
<h2 id="定义类图"><a href="#定义类图" class="headerlink" title="定义类图"></a>定义类图</h2><p><img src="/2020/01/04/observer-pattern/class.png" alt></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="/2020/01/04/observer-pattern/class1.png" alt></p>
<h3 id="不使用java-Observable-Observer-java-9-之后废除"><a href="#不使用java-Observable-Observer-java-9-之后废除" class="headerlink" title="不使用java Observable/Observer(java 9 之后废除)"></a>不使用java Observable/Observer(java 9 之后废除)</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// DisplayElement.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Observer.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">double</span> temp, <span class="keyword">double</span> humidity, <span class="keyword">double</span> pressure)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Subject.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// CurrentConditionsDisplay.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Current condition: "</span> +  temperature + <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">double</span> temperature, <span class="keyword">double</span> humidity, <span class="keyword">double</span> pressure)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//WeatherData</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> ArrayList observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>{</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>{</span><br><span class="line">        notifyObservers();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">double</span> temperature, <span class="keyword">double</span> humidity, <span class="keyword">double</span> pressure)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>{</span><br><span class="line">        observers.add(o);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span>(i >= <span class="number">0</span>) {</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < observers.size(); ++i) {</span><br><span class="line">            Observer observer = (Observer)observers.get(i);</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTemperature</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemperature</span><span class="params">(<span class="keyword">double</span> temperature)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHumidity</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHumidity</span><span class="params">(<span class="keyword">double</span> humidity)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPressure</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPressure</span><span class="params">(<span class="keyword">double</span> pressure)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeatherStation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        CurrentConditionsDisplay currentConditionsDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">32f</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h3 id="使用java-Observable-Observer"><a href="#使用java-Observable-Observer" class="headerlink" title="使用java Observable/Observer"></a>使用java Observable/Observer</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// CurrentConditionsDisplay</span></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"><span class="keyword">import</span> java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>{</span><br><span class="line">    Observable observable;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> humidity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Observable o)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.observable = o;</span><br><span class="line">        observable.addObserver(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> WeatherData) {</span><br><span class="line">            WeatherData weatherData = (WeatherData) o;</span><br><span class="line">            <span class="keyword">this</span>.temperature = weatherData.getTemperature();</span><br><span class="line">            <span class="keyword">this</span>.humidity = weatherData.getHumidity();</span><br><span class="line">            display();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Current condition: "</span> +  temperature + <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeatherData.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">double</span> temperature, <span class="keyword">double</span> humidity, <span class="keyword">double</span> pressure)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setChanged();</span><br><span class="line">        notifyObservers(); <span class="comment">// pull方法</span></span><br><span class="line">        notifyObservers(<span class="string">"Hello"</span>); <span class="comment">//push 方法</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTemperature</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemperature</span><span class="params">(<span class="keyword">double</span> temperature)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHumidity</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHumidity</span><span class="params">(<span class="keyword">double</span> humidity)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPressure</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPressure</span><span class="params">(<span class="keyword">double</span> pressure)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//WeatherStation.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        CurrentConditionsDisplay currentConditionsDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">32f</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>观察者模式</tag>
        <tag>设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>octopath-traveler</title>
    <url>/2020/02/29/octopath-traveler/</url>
    <content><![CDATA[<html><head></head><body><p>八方旅人，一方五十</p>
<p>第一次全通关一款JRPG，断断续续打了一个月，将近80小时全收集。</p>
<p>这个主线剧情最终Boss和隐藏Boss难度跨度有点大。</p>
<p>全角色第四章通关之后，花了5、6天准备升级和职业搭配准备打最后的隐藏Boss（PS：不愧是非酋之舞，不然也不会刷5天的级）</p>
<p>打完隐藏Boss之后整一个八方旅人的八个零散的主线就可以织起来了，总的剧情中规中矩。</p>
<p>游戏机制在老式传统回合制上有创新，玩起来有功有防，很有节奏感。同时音乐出色，不过价格偏贵，switch版玩完还可以回血。</p>
<p>推荐程度8/10</p>
<a id="more"></a>

<p>最后收藏了一些图：</p>
<p><img src="/2020/02/29/octopath-traveler/alfyn.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/cyrus.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/haannit.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/olberic.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/ophilia.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/primrose.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/therion.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/tressa.jpg" alt></p>
<p><img src="/2020/02/29/octopath-traveler/boss.jpg" alt></p>
</body></html>]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>八方旅人</tag>
        <tag>SE</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/01/08/singleton/</url>
    <content><![CDATA[<html><head></head><body><h2 id="设计模式之一：单例模式"><a href="#设计模式之一：单例模式" class="headerlink" title="设计模式之一：单例模式"></a>设计模式之一：单例模式</h2><p><strong>定义</strong>：确保一个类只有一个实例，并提供一个全局访问点。</p>
<p><strong>主要解决</strong>：一个全局使用的类频繁地创建与销毁。</p>
<p><strong>何时使用</strong>：当您想控制实例数目，节省系统资源的时候。</p>
<p><strong>如何解决</strong>：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>
<p><strong>关键代码</strong>：构造函数是私有的。</p>
<a id="more"></a>
<p><strong>应用实例</strong>：</p>
<ol>
<li><p>一个班级只有一个班主任。</p>
</li>
<li><p>Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>
</li>
<li><p>一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br>优点：</p>
</li>
<li><p>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</p>
</li>
<li><p>避免对资源的多重占用（比如写文件操作）。<br>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>
</li>
</ol>
<p><strong>使用场景</strong>：</p>
<ol>
<li>要求生产唯一序列号。</li>
<li>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li>
<li>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。<br>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</li>
</ol>
<p><strong>优点</strong>：单件可以延迟实例化。</p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2020/01/08/singleton/singleton.png" alt></p>
<h3 id="典型代码"><a href="#典型代码" class="headerlink" title="典型代码"></a>典型代码</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 多线程情况下，如果性能对应用程序不是很关键，可以加上synchronized， 不过可能回造成执行效率下降100倍。</span></span><br><span class="line"><span class="comment">// 延迟实例化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// “急切”创建实例。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton(); <span class="comment">// 保证线程安全</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line"><span class="comment">// 双重检查加锁    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) {</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>java</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT攻略</title>
    <url>/2019/12/29/strategy-pat/</url>
    <content><![CDATA[<html><head></head><body><p>其实我pat准备得很迟，七月中旬才开始准备PAT。</p>
<p>就刷了甲级100来道题，就去考场了，其他都ac了。可能太过于紧张，第一题就留了半小时，没做出来，拿了80 …… </p>
<p>第二次把乙级题都刷了一遍，甲级中的20分题以及对照刷题目录把甲级中的经典题型也都重新刷一遍。</p>
<p>其实pat不需要全刷，有些题是真的恶心，早期各种各样恶心的模拟题，比如臭名昭著的<code>Table tennis</code>。</p>
<p>我就刷了120多题。</p>
<a id="more"></a>
<p>我感觉我这个路线应该可以2个月速成PAT甲级。我的路线：PAT乙级全刷-><a href="https://charstal.com/pat-advanced-recommend/" target="_blank" rel="noopener">真题目录</a>->甲级1101题往后所有题->还有有时间的话把甲级20分题都做一下(第一题有时候挺难的)</p>
<p>IDE： DEV C++(一般这个都有，刷题最好用c++)</p>
<p>书籍：《算法笔记》俗称晴神宝典</p>
<p>代码参考：<a href="https://www.liuchuo.net/" target="_blank" rel="noopener">柳神博客</a></p>
<p>PAT乙级，是帮助你熟悉C++/C，掌握字符串的处理的开始</p>
<p><a href="https://charstal.com/pat-advanced-recommend/" target="_blank" rel="noopener">真题目录</a>：题型分类，里面的题都是非常经典的，值得多做几次。可以从易到难，二点论结合：STL(熟悉stl)->链表->排序->树->图->广度、深度->最短路径->搜索树、平衡树->堆->并查集。其他就不用怎么用看了，基本不考。</p>
<p>差不多这样就行了吧，一天三个小时，两个月90分没有问题，100分还是需要点实力和运气的。</p>
</body></html>]]></content>
      <categories>
        <category>DS</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2020/01/03/strategy-pattern/</url>
    <content><![CDATA[<html><head></head><body><h2 id="设计模式之一：策略模式"><a href="#设计模式之一：策略模式" class="headerlink" title="设计模式之一：策略模式"></a>设计模式之一：策略模式</h2><p><strong>定义</strong>: 定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让的变化独立于使用算法的客户。</p>
<p><strong>意图</strong>：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>
<p><strong>主要解决</strong>：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p>
<p><strong>何时使用</strong>：一个系统有许多许多类，而区分它们的只是他们直接的行为。</p>
<p><strong>如何解决</strong>：将这些算法封装成一个一个的类，任意地替换。</p>
<p><strong>关键代码</strong>：实现同一个接口。</p>
<a id="more"></a>
<p><strong>应用实例</strong>： </p>
<ol>
<li>诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 </li>
<li>旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 </li>
<li>JAVA AWT 中的 LayoutManager。</li>
</ol>
<p><strong>优点</strong>： </p>
<ol>
<li>算法可以自由切换。 </li>
<li>避免使用多重条件判断。 </li>
<li>扩展性良好。</li>
</ol>
<p><strong>缺点</strong>： </p>
<ol>
<li>策略类会增多。 </li>
<li>所有策略类都需要对外暴露。</li>
</ol>
<p><strong>使用场景</strong>： </p>
<ol>
<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </li>
<li>一个系统需要动态地在几种算法中选择一种。 </li>
<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li>
</ol>
<p><strong>注意事项</strong>：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 针对实现编程</span></span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">d.bark();</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 针对接口编程</span></span><br><span class="line">Animal animal = <span class="keyword">new</span> Dog();</span><br><span class="line">animal.makeSound();</span><br></pre></td></tr></tbody></table></figure>


<h2 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h2><p><img src="/2020/01/03/strategy-pattern/%E9%B8%AD%E5%AD%90%E5%BA%94%E7%94%A8.png" alt></p>
<h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>衍生的特定类具有Duck共同的属性和方法，所以不能设计成为接口，应该设置成为抽象类。<br>叫声和飞行行为，每种鸭子行为不同，可以设置为从一系列算法族中选取一个算法。</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 算法接口</span></span><br><span class="line"><span class="comment">// FlyBehavior.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuackBehavior.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 鸭子对象</span></span><br><span class="line"><span class="comment">// Duck.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>{</span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>{</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>{</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"I can swim"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MallardDuck.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>{</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line"><span class="comment">//        this.setFlyBehavior(new FlyWithWings());</span></span><br><span class="line"><span class="comment">//        this.setQuackBehavior(new Quack());</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"I'm a real mallard duck"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MallardDuck mallardDuck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        mallardDuck.performFly();</span><br><span class="line">        mallardDuck.performQuack();</span><br><span class="line">        mallardDuck.display();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// RedheadDuck.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedheadDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// RubberDuck</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 算法实现，即鸭子的行为</span></span><br><span class="line"><span class="comment">// FlyNoWay.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"I cannot fly"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// FlyWithWings.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"I can fly"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// MuteQuack.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"emmm"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Gua Gua"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Squeak.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Zhi Zhi"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计原则</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-winter-PAT-advanced</title>
    <url>/2019/12/28/2019-winter-PAT-advanced/</url>
    <content><![CDATA[<html><head></head><body><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>第一次拿100，留个纪念。</p>
<p>这是第二次考了， 第一次9月份考的，准备作为考研机试。考前准备复习了十几个小时就上考场了</p>
<p>第一考的时候心态不太好，看到第一题，心态崩了，搞了好久一个半小时一分没拿，后来心态回了点，把后面三题写完了， 最后没时间写第一题了。</p>
<p>第二次考的时候，心态稍微好了一点，看到第一题，没看懂，心态有点微崩。 直接做后面三题，还是比较简单的。回过来做第一个，其实也就是个格式控制，半小时写完出考场了。</p>
<p>本来以为会考AVL和最短路径或者集合的，结果没考，紧张死了。</p>
<h3 id="7-1-Good-in-C-20分"><a href="#7-1-Good-in-C-20分" class="headerlink" title="7-1 Good in C (20分)"></a>7-1 Good in C (20分)</h3><p>When your interviewer asks you to write “Hello World” using C, can you do as the following figure shows?</p>
<p><img src="/2019/12/28/2019-winter-PAT-advanced/HWC.jpg" alt="HWC.jpg"></p>
<h4 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first part gives the 26 capital English letters A-Z, each in a 7×5 matrix of C’s and .’s. Then a sentence is given in a line, ended by a return. The sentence is formed by several words (no more than 10 continuous capital English letters each), and the words are separated by any characters other than capital English letters.</p>
<p>It is guaranteed that there is at least one word given.</p>
<h4 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each word, print the matrix form of each of its letters in a line, and the letters must be separated by exactly one column of space. There must be no extra space at the beginning or the end of the word.</p>
<p>Between two adjacent words, there must be a single empty line to separate them. There must be no extra line at the beginning or the end of the output.</p>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><a id="more"></a>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">..C..</span><br><span class="line">.C.C.</span><br><span class="line">C...C</span><br><span class="line">CCCCC</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCC.</span><br><span class="line">.CCC.</span><br><span class="line">C...C</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C...C</span><br><span class="line">.CCC.</span><br><span class="line">CCCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCC.</span><br><span class="line">CCCCC</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">CCCC.</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">CCCCC</span><br><span class="line">CCCCC</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">CCCC.</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">CCCC.</span><br><span class="line">C...C</span><br><span class="line">C....</span><br><span class="line">C.CCC</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCCC</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCCC</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">CCCCC</span><br><span class="line">CCCCC</span><br><span class="line">....C</span><br><span class="line">....C</span><br><span class="line">....C</span><br><span class="line">....C</span><br><span class="line">C...C</span><br><span class="line">.CCC.</span><br><span class="line">C...C</span><br><span class="line">C..C.</span><br><span class="line">C.C..</span><br><span class="line">CC...</span><br><span class="line">C.C..</span><br><span class="line">C..C.</span><br><span class="line">C...C</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">CCCCC</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CC.CC</span><br><span class="line">C.C.C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CC..C</span><br><span class="line">C.C.C</span><br><span class="line">C..CC</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">.CCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">.CCC.</span><br><span class="line">CCCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">CCCC.</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">C....</span><br><span class="line">.CCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C.C.C</span><br><span class="line">C..CC</span><br><span class="line">.CCC.</span><br><span class="line">CCCC.</span><br><span class="line">C...C</span><br><span class="line">CCCC.</span><br><span class="line">CC...</span><br><span class="line">C.C..</span><br><span class="line">C..C.</span><br><span class="line">C...C</span><br><span class="line">.CCC.</span><br><span class="line">C...C</span><br><span class="line">C....</span><br><span class="line">.CCC.</span><br><span class="line">....C</span><br><span class="line">C...C</span><br><span class="line">.CCC.</span><br><span class="line">CCCCC</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">.CCC.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">.C.C.</span><br><span class="line">..C..</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C.C.C</span><br><span class="line">CC.CC</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">.C.C.</span><br><span class="line">..C..</span><br><span class="line">.C.C.</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">C...C</span><br><span class="line">.C.C.</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">..C..</span><br><span class="line">CCCCC</span><br><span class="line">....C</span><br><span class="line">...C.</span><br><span class="line">..C..</span><br><span class="line">.C...</span><br><span class="line">C....</span><br><span class="line">CCCCC</span><br><span class="line">HELLO~WORLD!</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">C...C CCCCC C.... C.... .CCC.</span><br><span class="line">C...C C.... C.... C.... C...C</span><br><span class="line">C...C C.... C.... C.... C...C</span><br><span class="line">CCCCC CCCC. C.... C.... C...C</span><br><span class="line">C...C C.... C.... C.... C...C</span><br><span class="line">C...C C.... C.... C.... C...C</span><br><span class="line">C...C CCCCC CCCCC CCCCC .CCC.</span><br><span class="line"></span><br><span class="line">C...C .CCC. CCCC. C.... CCCC.</span><br><span class="line">C...C C...C C...C C.... C...C</span><br><span class="line">C...C C...C CCCC. C.... C...C</span><br><span class="line">C.C.C C...C CC... C.... C...C</span><br><span class="line">CC.CC C...C C.C.. C.... C...C</span><br><span class="line">C...C C...C C..C. C.... C...C</span><br><span class="line">C...C .CCC. C...C CCCCC CCCC.</span><br></pre></td></tr></tbody></table></figure>


<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>这题，它给了26个单词的7×5矩阵的字符表示形式，要求把把最后的字符串的大写单词分别表出来。  </p>
<p>这题坑点就是严格的格式。首先很自然的会用一个数组储存单词的表示形式，所以我用了一个<code>data[26][7][5]</code>数组存，注意不要将结尾的回车存入。使用<code>getline</code>获得一整行字符串，然后将字符串遍历，将小于10个字符长度的全大写连续的单词存起来，用作结果输出。然后按行输出，可以看出每一个单词都是七行，然后根据每个单词，输出对应行，就可以了，格式注意一下就好了。</p>
<h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><string></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">	<span class="keyword">char</span> data[<span class="number">26</span>][<span class="number">7</span>][<span class="number">5</span>], ch;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">26</span>; ++i) { <span class="comment">//存数据</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j < <span class="number">7</span>; ++j) {</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k < <span class="number">5</span>; ++k) {</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &ch);</span><br><span class="line">				<span class="keyword">if</span>(ch == <span class="string">'\n'</span>) k--; <span class="comment">//跳过回车</span></span><br><span class="line">				<span class="keyword">else</span> data[i][j][k] = ch;	</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	getchar(); <span class="comment">// 字符串处理</span></span><br><span class="line">	<span class="built_in">string</span> s, s1 = <span class="string">""</span>;</span><br><span class="line">	getline(<span class="built_in">cin</span>, s);</span><br><span class="line">	<span class="built_in">vector</span><<span class="built_in">string</span>> result;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < s.<span class="built_in">size</span>(); ++i) {</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">'A'</span> <= s[i] && s[i] <= <span class="string">'Z'</span>) {</span><br><span class="line">			s1 += s[i];</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">if</span>(s1 != <span class="string">""</span> && s1.length() <= <span class="number">10</span>)</span><br><span class="line">				result.push_back(s1);</span><br><span class="line">			s1 = <span class="string">""</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span>(s1 != <span class="string">""</span>) result.push_back(s1);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < result.<span class="built_in">size</span>(); ++i) { <span class="comment">// 输出模块</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j < <span class="number">7</span>; ++j) {</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k < result[i].<span class="built_in">size</span>(); ++k) {</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l < <span class="number">5</span>; ++l) {</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%c"</span>, data[result[i][k]- <span class="string">'A'</span>][j][l]);</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span>(k != result[i].<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			}</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span>(i != result.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="7-2-Block-Reversing-25分"><a href="#7-2-Block-Reversing-25分" class="headerlink" title="7-2 Block Reversing (25分)"></a>7-2 Block Reversing (25分)</h3><p>Given a singly linked list L. Let us consider every K nodes as a <code>block</code> (if there are less than K nodes at the end of the list, the rest of the nodes are still considered as a block). Your job is to reverse all the blocks in L. For example, given L as 1→2→3→4→5→6→7→8 and K as 3, your output must be 7→8→4→5→6→1→2→3.</p>
<h4 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (≤$10^5$) which is the total number of nodes, and a positive K (≤N) which is the size of a block. The address of a node is a 5-digit nonnegative integer, and NULL is represented by −1.</p>
<p>Then N lines follow, each describes a node in the format:</p>
<blockquote>
<p>Address Data Next</p>
</blockquote>
<p>where Address is the position of the node, Data is an integer, and Next is the position of the next node.</p>
<h4 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p>
<h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">00100 8 3</span><br><span class="line">71120 7 88666</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 71120</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">88666 8 -1</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></tbody></table></figure>


<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">71120 7 88666</span><br><span class="line">88666 8 00000</span><br><span class="line">00000 4 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 00100</span><br><span class="line">00100 1 12309</span><br><span class="line">12309 2 33218</span><br><span class="line">33218 3 -1</span><br></pre></td></tr></tbody></table></figure>

<h4 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h4><p>常规的链表题，就是将每K个数据编成一组，然后将这几个组逆置。为了稳妥起见，使用结构体数组存链式关系，然后从开头遍历，每k个存入同一个<code>vecotr<node></code>，再将这个<code>vector<node></code>存入<code>vector<vector<node>></code>，然后拼接成一个<code>vector<node></code>，然后遍历重新改写next就好了，最后在注意一下格式就行了。</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> {</span></span><br><span class="line">	<span class="keyword">int</span> address;</span><br><span class="line">	<span class="keyword">int</span> key;</span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">node <span class="built_in">list</span>[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">	<span class="keyword">int</span> start, n, k;</span><br><span class="line">	<span class="built_in">cin</span> >> start >> n >> k;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> s, key, ne;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < n; ++i) {</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &s);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &<span class="built_in">list</span>[s].key, &<span class="built_in">list</span>[s].next);</span><br><span class="line">		<span class="built_in">list</span>[s].address = s;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">vector</span><<span class="built_in">vector</span><node>> data;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(start != <span class="number">-1</span>) {</span><br><span class="line">		<span class="keyword">int</span> count = k;</span><br><span class="line">		<span class="built_in">vector</span><node> tmp;</span><br><span class="line">		<span class="keyword">while</span>(count-- && start != <span class="number">-1</span>) {</span><br><span class="line">			tmp.push_back(<span class="built_in">list</span>[start]);</span><br><span class="line">			start = <span class="built_in">list</span>[start].next;</span><br><span class="line">		}</span><br><span class="line">		data.push_back(tmp);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">vector</span><node> result;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = data.<span class="built_in">size</span>() - <span class="number">1</span>; i >= <span class="number">0</span>; --i) {</span><br><span class="line">		result.insert(result.<span class="built_in">end</span>(), data[i].<span class="built_in">begin</span>(), data[i].<span class="built_in">end</span>());</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < result.<span class="built_in">size</span>(); ++i) {</span><br><span class="line">		<span class="keyword">if</span>(i == result.<span class="built_in">size</span>() - <span class="number">1</span>) result[i].next = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> result[i].next = result[i+<span class="number">1</span>].address;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < result.<span class="built_in">size</span>(); ++i) {</span><br><span class="line">		<span class="keyword">if</span>(i == result.<span class="built_in">size</span>() - <span class="number">1</span>) {</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%05d %d -1\n"</span>, result[i].address, result[i].key);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>, result[i].address, result[i].key, result[i].next);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h3 id="7-3-Summit-25分"><a href="#7-3-Summit-25分" class="headerlink" title="7-3 Summit (25分)"></a>7-3 Summit (25分)</h3><p>A summit (峰会) is a meeting of heads of state or government. Arranging the rest areas for the summit is not a simple job. The ideal arrangement of one area is to invite those heads so that everyone is a direct friend of everyone.</p>
<p>Now given a set of tentative arrangements, your job is to tell the organizers whether or not each area is all set.</p>
<h4 id="Input-Specification-2"><a href="#Input-Specification-2" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line gives two positive integers N (≤ 200), the number of heads in the summit, and M, the number of friendship relations. Then M lines follow, each gives a pair of indices of the heads who are friends to each other. The heads are indexed from 1 to N.</p>
<p>Then there is another positive integer K (≤ 100), and K lines of tentative arrangement of rest areas follow, each first gives a positive number L (≤ N), then followed by a sequence of L distinct indices of the heads. All the numbers in a line are separated by a space.</p>
<h4 id="Output-Specification-2"><a href="#Output-Specification-2" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each of the K areas, print in a line your advice in the following format:</p>
<p>if in this area everyone is a direct friend of everyone, and no friend is missing (that is, no one else is a direct friend of everyone in this area), print Area X is OK..</p>
<p>if in this area everyone is a direct friend of everyone, yet there are some other heads who may also be invited without breaking the ideal arrangement, print Area X may invite more people, such as H. where H is the smallest index of the head who may be invited.</p>
<p>if in this area the arrangement is not an ideal one, then print Area X needs help. so the host can provide some special service to help the heads get to know each other.</p>
<p>Here X is the index of an area, starting from 1 to K.</p>
<h4 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h4><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343979159552" target="_blank" rel="noopener">pat1142</a>原题考过，不难，就是判断给出的这几个人是否互为朋友，如果为朋友，是否存在一个人不在其中，缺与其他人都是朋友关系。这题可以设置两个判断。第一个判断，判断人是否相互为朋友，暴力搜两个人之间是否有关系。第二个判断，判断是否有这样的一个人，暴力搜不在其中的人的人际关系。</p>
<h4 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">8 10</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br><span class="line">6 4</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">2 3</span><br><span class="line">8 2</span><br><span class="line">2 7</span><br><span class="line">5 3</span><br><span class="line">3 4</span><br><span class="line">6</span><br><span class="line">4 5 4 3 6</span><br><span class="line">3 2 8 7</span><br><span class="line">2 2 3</span><br><span class="line">1 1</span><br><span class="line">2 4 6</span><br><span class="line">3 3 2 1</span><br></pre></td></tr></tbody></table></figure>


<h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Area 1 is OK.</span><br><span class="line">Area 2 is OK.</span><br><span class="line">Area 3 is OK.</span><br><span class="line">Area 4 is OK.</span><br><span class="line">Area 5 may invite more people, such as 3.</span><br><span class="line">Area 6 needs help.</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h4><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> e[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">210</span>];</span><br><span class="line"><span class="keyword">int</span> person = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge1</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &data)</span> </span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < data.<span class="built_in">size</span>(); ++i) {</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j < data.<span class="built_in">size</span>(); ++j) {</span><br><span class="line">			<span class="keyword">if</span>(!e[data[i]][data[j]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge2</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &data)</span> </span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i <= n; ++i) {</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) {</span><br><span class="line">			<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(; j < data.<span class="built_in">size</span>(); ++j) {</span><br><span class="line">				<span class="keyword">if</span>(!e[i][data[j]]) <span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span>(j == data.<span class="built_in">size</span>()) {</span><br><span class="line">				person = i;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cin</span> >> n >> m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < m; ++i) {</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &a, &b);</span><br><span class="line">		e[a][b] = <span class="number">1</span>;</span><br><span class="line">		e[b][a] = <span class="number">1</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="built_in">cin</span> >> k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j <= k; ++j) {</span><br><span class="line">		<span class="keyword">int</span> l;</span><br><span class="line">		<span class="built_in">cin</span> >> l;</span><br><span class="line">		<span class="built_in">vector</span><<span class="keyword">int</span>> data;</span><br><span class="line">		<span class="built_in">fill</span>(vis, vis + <span class="number">210</span>, <span class="literal">false</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < l; ++i) {</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &a);</span><br><span class="line">			data.push_back(a);</span><br><span class="line">			vis[a] = <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span>(!judge1(data)) {</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Area %d needs help.\n"</span>, j);</span><br><span class="line">		} <span class="keyword">else</span> <span class="keyword">if</span>(judge2(data)){</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Area %d is OK.\n"</span>, j);</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Area %d may invite more people, such as %d.\n"</span>, j, person);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h3 id="7-4-Cartesian-Tree-30分"><a href="#7-4-Cartesian-Tree-30分" class="headerlink" title="7-4 Cartesian Tree (30分)"></a>7-4 Cartesian Tree (30分)</h3><p>A Cartesian tree is a binary tree constructed from a sequence of distinct numbers. The tree is heap-ordered, and an inorder traversal returns the original sequence. For example, given the sequence { 8, 15, 3, 4, 1, 5, 12, 10, 18, 6 }, the min-heap Cartesian tree is shown by the figure.</p>
<p><img src="/2019/12/28/2019-winter-PAT-advanced/CTree.jpg" alt="CTree.jpg"></p>
<p>Your job is to output the level-order traversal sequence of the min-heap Cartesian tree.</p>
<h4 id="Input-Specification-3"><a href="#Input-Specification-3" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. Each case starts from giving a positive integer N (≤30), and then N distinct numbers in the next line, separated by a space. All the numbers are in the range of int.</p>
<h4 id="Output-Specification-3"><a href="#Output-Specification-3" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print in a line the level-order traversal sequence of the min-heap Cartesian tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the beginning or the end of the line.</p>
<h4 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">10</span><br><span class="line">8 15 3 4 1 5 12 10 18 6</span><br></pre></td></tr></tbody></table></figure>


<h4 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1 3 5 8 4 6 15 10 12 18</span><br></pre></td></tr></tbody></table></figure>


<h4 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h4><p>这题是利用堆的一个中序，生成堆，并且输出它的层序遍历结果。<br>这题也不难，其实和前序中序生成树或者中序后序生成树差不多。为了防止爆数组，我是用map充当数组的作用，递归建树。</p>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><map></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> in;</span><br><span class="line"><span class="built_in">map</span><<span class="keyword">int</span>,<span class="keyword">int</span>> tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createTree</span><span class="params">(<span class="keyword">int</span> ind, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>{</span><br><span class="line">	<span class="keyword">if</span>(start > <span class="built_in">end</span>) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">int</span> index = start;</span><br><span class="line">	<span class="keyword">int</span> key = in[start];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = start; i <= <span class="built_in">end</span>; ++i) {</span><br><span class="line">		<span class="keyword">if</span>(key > in[i]) {</span><br><span class="line">			key = in[i];</span><br><span class="line">			index = i;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	tree[ind] = key;</span><br><span class="line">	createTree(ind * <span class="number">2</span>, start, index - <span class="number">1</span>);</span><br><span class="line">	createTree(ind * <span class="number">2</span> + <span class="number">1</span>, index + <span class="number">1</span>, <span class="built_in">end</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">	<span class="keyword">int</span> n, num;</span><br><span class="line">	<span class="built_in">cin</span> >> n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i < n; ++i) {</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &num);</span><br><span class="line">		in.push_back(num);</span><br><span class="line">	}</span><br><span class="line">	createTree(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> a = tree.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, a->second);</span><br><span class="line">	a++;</span><br><span class="line">	<span class="keyword">for</span>(; a != tree.<span class="built_in">end</span>(); ++a) {</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" %d"</span>, a->second);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>DS</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
